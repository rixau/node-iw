'use strict';var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});const child_process_1=require('child_process');const error_1=__importDefault(require('./error'));const phy={getChannels(physicalInterfaceName){let channels=[];try{const output=(0,child_process_1.execSync)(`iw phy ${physicalInterfaceName} channels`).toString();channels=output.split('*').filter(e=>e!==''&&!e.match(/.*(disabled).*/g)).map(e=>{const freq=parseInt(e.match(/(?<= )([0-9][0-9][0-9][0-9])(?= MHz)/g)?.at(0)||'')||-1;const txPower=parseInt(e.match(/(?<=Maximum TX power:.)([0-9][0-9]\.[0-9]+)(?=.*dBm)/g)?.at(0)||'')||-1;const channel=parseInt(e.match(/(?<=MHz \[)([0-9]+)(?=\])/g)?.at(0)||'')||-1;const widths=e.match(/(?<=Channel widths: ).*/g)?.at(0)?.split(' ').map(e=>e)||[];return{channel,freq,txPower,widths};}).filter(e=>e.channel>0);}catch(error){(0,error_1.default)(error,physicalInterfaceName);}return channels;}};exports.default=phy;